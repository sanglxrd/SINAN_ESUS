#Atribui o nome do diretório onde estão os arquivos .csv referentes ao dicionário de cada campo do SINAN
dir_input <- paste(getwd(), "/dict/", sep="")
#Cria uma lista com o nome dos campos para os quais os dicionários de dados são fornecidos
list_files<-c("TP_NOT","SG_UF","UF_EMP","UF_HOSP", "SG_UF_NOT", "ID_MUNICIP", "CS_SEXO", "CS_GESTANT","CS_RACA", "CS_ESCOL_N",
"SG_UF","ID_MN_RESI","CS_ZONA", "ID_OCUPA_N", "SIT_TRAB", "LOC_EXPO",
"ZONA_EXP", "AGENTE_TOX", "UTILIZACAO", "ATIVIDA_1", "ATIVIDA_2", "ATIVIDA_3",
"VIA_1", "VIA_2", "VIA_3", "CIRCUNSTAN", "DOENCA_TRA", "TPEXP", "TPATENDE", "HOSPITAL",
"CLASSI_FIN", "CRITERIO", "EVOLUCAO", "CAT")
#Inicializa a lista final de dicionários
list_dict <- NULL
#Lê os arquivos .csv referentes aos dicionários e consolida em uma lista só (list_dict)
for (file in list_files){
#Define o diretório de cada arquivo de dicionário .csv
dir_file <- paste(paste(dir_input, file, sep = ""),".csv", sep="")
#Realiza a leitura dos dicionários .csv. Para os campos especificados realiza uma leitura como character
#considerando a presença de dois caracteres o que leva a ocorrência de 0 à esquerda (e.g. 01, 02, 03 etc)
ifelse(file %in% c("CS_ESCOL_N","ID_OCUPA_N", "SIT_TRAB", "AGENTE_TOX", "ATIVIDA_1", "ATIVIDA_2", "ATIVIDA_3", "CIRCUNSTAN"),
df_dict <- read.csv(dir_file, header =TRUE, sep=";", colClasses = c("key"="character"), fileEncoding = "latin1"),
df_dict <- read.csv(dir_file, header =TRUE, sep=";",fileEncoding = "latin1")
)
#Consolida e atualiza list_dict
list_dict <- append(list_dict, list(df_dict))
}
#Atribui ao nome dos items da lista os mesmos nomes que os campos do SINAN
names(list_dict)<-list_files
return(list_dict)
}
lista_dict <- load_dict_sinan()
reclass_sinan <- function(data, lista_dict, list_prop = NULL){
# Utiliza a lista proposta de campos (list_prop) para processar os dados
if (is.null(list_prop)){
lista <- names(lista_dict)
} else {
lista <- list_prop
}
# Para cada campo na lista, realiza a tradução dos dados
for (col in lista) {
# Escolhe o dicionário para cada campo
dict_col <- lista_dict[[col]]
# Mapeia os valores do dicionário com os valores dos dados
# Corrigido para acessar as colunas corretamente
suppressMessages(
data[[col]] <- mapvalues(data[[col]], from = dict_col[,"key"], to = dict_col[,"value"])
)
}
return(data)
}
# Aplicando a função corrigida
data1 <- reclass_sinan(data, lista_dict) |>  as.data.frame(data)
View(data1)
# Histograma por Ano: Quantidade de notificações por ano com percentuais e números absolutos
hist_data <- data %>%
group_by(NU_ANO) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # .groups = 'drop' para evitar agrupamento adicional
mutate(Percentage = (Count / sum(Count)) * 100)
# Gráfico de histograma por ano com números absolutos dentro das colunas e percentuais acima
ggplot(hist_data, aes(x = NU_ANO, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Count),
vjust = 1.5, # Posicionar o número absoluto dentro da barra
color = "white", # Cor branca para visibilidade
position = position_stack(vjust = 0.5),
size = 4) +
geom_text(aes(label = paste0(round(Percentage, 2), "%")),
vjust = -0.5, # Posicionar o percentual acima da barra
color = "black", # Cor preta para o percentual
size = 4) +
labs(title = "Número de Notificações por Ano", x = "Ano", y = "Número de Notificações") +
theme_classic()
## Ajustar a NU_IDADE_N e criar IDADE_REAL
data$NU_IDADE_N[data$NU_IDADE_N < 3999] <- 0
# Diagnóstico: Verificar transformação de NU_IDADE_N
print(head(data$NU_IDADE_N, 10))
data <- data %>%
mutate(IDADE_REAL = as.numeric(substr(NU_IDADE_N, 3, 4))) %>%
mutate(Faixa_Etaria = cut(IDADE_REAL,
breaks = c(0, 1, 4, 9, 14, 19, 29, 39, 49, 59, Inf),
labels = c("0-1", "1-4", "5-9", "10-14", "15-19",
"20-29", "30-39", "40-49", "50-59", "60+"),
right = FALSE))
# Diagnóstico: Verificar resultado de IDADE_REAL e Faixa_Etaria
print(head(data[, c("IDADE_REAL", "Faixa_Etaria")], 10))
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data %>%
filter(CS_SEXO %in% c("M", "F")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
# Verificar se `Count` tem valores válidos
print(sexo_faixa_count)
# Verifique se há problemas de NA
if (all(is.na(sexo_faixa_count$Count))) {
stop("Erro: Todos os valores de Count são NA. Verifique os dados de entrada e a filtragem.")
}
# Definir o valor máximo para centralizar as barras
max_count <- max(abs(sexo_faixa_count$Count), na.rm = TRUE)
# Diagnóstico: Verificar valor máximo calculado
print(max_count)
View(data1)
pacotes <- c("tidyr", "gtsummary", "xml2", "knitr", "kableExtra", "DT", "tidyverse",
"data.table", "readr", "readxl", "writexl", "purrr", "lubridate", "foreign",
"rlist", "stringr", "stringdist", "shiny", "rgdal",
"leaflet", "ggplot2", "gridExtra", "treemap", "RColorBrewer", "googleVis",
"ggpubr", "sf", "reshape")
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
ggplot(sexo_faixa_count, aes(x = Faixa_Etaria, y = Count, fill = CS_SEXO)) +
geom_bar(stat = "identity", width = 0.7) +
geom_text(aes(label = paste0(abs(Count), " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +
labs(title = "Pirâmide Etária por Sexo e Faixa Etária",
x = "Faixa Etária", y = "Número de Notificações") +
scale_y_continuous(labels = abs, breaks = seq(-max_count, max_count, by = 5000), limits = c(-max_count, max_count)) +
scale_fill_manual(values = c("Feminino" = "red", "Masculino" = "blue")) +
coord_flip() +  # Inverter os eixos para fazer o gráfico horizontal
theme_minimal() +
theme(legend.position = "top",
legend.title = element_blank(),  # Remover o título da legenda
plot.title = element_text(face = "bold", hjust = 0.5))
ggplot(sexo_faixa_count, aes(x = Faixa_Etaria, y = Count, fill = CS_SEXO)) +
geom_bar(stat = "identity", width = 0.7) +
geom_text(aes(label = paste0(abs(Count), " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +
labs(title = "Pirâmide Etária por Sexo e Faixa Etária",
x = "Faixa Etária", y = "Número de Notificações") +
scale_y_continuous(labels = abs, breaks = seq(-max_count, max_count, by = 5000), limits = c(-max_count, max_count)) +
scale_fill_manual(values = c("Feminino" = "red", "Masculino" = "blue")) +
coord_flip() +  # Inverter os eixos para fazer o gráfico horizontal
theme_classic() +
theme(legend.position = "top",
legend.title = element_blank(),  # Remover o título da legenda
plot.title = element_text(face = "bold", hjust = 0.5))
# Criando as faixas etárias especificadas
data <- data %>%
mutate(Faixa_Etaria1 = case_when(
IDADE_REAL < 1 ~ "Menor de 1 ano",
IDADE_REAL >= 1 & IDADE_REAL <= 5 ~ "1-5 anos",
IDADE_REAL >= 6 & IDADE_REAL <= 12 ~ "6-12 anos",
IDADE_REAL > 12 ~ "+12"
)) %>%
filter(!is.na(CS_SEXO) & CS_SEXO %in% c("M", "F"))  # Filtrar apenas M e F, removendo NA
# Contagem por sexo e faixa etária
sexo_faixa_count <- data %>%
group_by(CS_SEXO, Faixa_Etaria1) %>%
summarise(Count = n()) %>%
ungroup() %>%
mutate(Total = sum(Count),
Percentage = (Count / Total) * 100)
# Contagem por sexo e faixa etária
sexo_faixa_count <- data %>%
group_by(CS_SEXO, Faixa_Etaria1) %>%
dply::summarise(Count = n()) %>%
ungroup() %>%
mutate(Total = sum(Count),
Percentage = (Count / Total) * 100)
# Gráfico de barras empilhadas para sexo e as novas faixas etárias
ggplot(sexo_faixa_count, aes(x = CS_SEXO, y = Count, fill = Faixa_Etaria1)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(Count, " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +  # Aplicar negrito aos números
labs(title = "Distribuição por Sexo e Faixa Etária", x = "Sexo", y = "Número de Notificações") +
scale_fill_brewer(palette = "Pastel1", na.translate = FALSE) +  # Remover NA da legenda
guides(fill = guide_legend(title = NULL)) +  # Remover o título da legenda
theme_classic()
# Criando as faixas etárias especificadas
data <- data %>%
mutate(Faixa_Etaria1 = case_when(
IDADE_REAL < 1 ~ "Menor de 1 ano",
IDADE_REAL >= 1 & IDADE_REAL <= 5 ~ "1-5 anos",
IDADE_REAL >= 6 & IDADE_REAL <= 12 ~ "6-12 anos",
IDADE_REAL > 12 ~ "+12"
)) %>%
filter(!is.na(CS_SEXO) & CS_SEXO %in% c("M", "F"))  # Filtrar apenas M e F, removendo NA
# Contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
group_by(CS_SEXO, Faixa_Etaria1) %>%
dply::summarise(Count = n()) %>%
ungroup() %>%
mutate(Total = sum(Count),
Percentage = (Count / Total) * 100)
# Contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
group_by(CS_SEXO, Faixa_Etaria1) %>%
dplyr::summarise(Count = n()) %>%
ungroup() %>%
mutate(Total = sum(Count),
Percentage = (Count / Total) * 100)
# Gráfico de barras empilhadas para sexo e as novas faixas etárias
ggplot(sexo_faixa_count, aes(x = CS_SEXO, y = Count, fill = Faixa_Etaria1)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(Count, " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +  # Aplicar negrito aos números
labs(title = "Distribuição por Sexo e Faixa Etária", x = "Sexo", y = "Número de Notificações") +
scale_fill_brewer(palette = "Pastel1", na.translate = FALSE) +  # Remover NA da legenda
guides(fill = guide_legend(title = NULL)) +  # Remover o título da legenda
theme_classic()
# Criando as faixas etárias especificadas
data <- data1 %>%
mutate(Faixa_Etaria1 = case_when(
IDADE_REAL < 1 ~ "Menor de 1 ano",
IDADE_REAL >= 1 & IDADE_REAL <= 5 ~ "1-5 anos",
IDADE_REAL >= 6 & IDADE_REAL <= 12 ~ "6-12 anos",
IDADE_REAL > 12 ~ "+12"
)) %>%
filter(!is.na(CS_SEXO) & CS_SEXO %in% c("M", "F"))  # Filtrar apenas M e F, removendo NA
# Histograma por Ano: Quantidade de notificações por ano com percentuais e números absolutos
hist_data <- data1 %>%
group_by(NU_ANO) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # .groups = 'drop' para evitar agrupamento adicional
mutate(Percentage = (Count / sum(Count)) * 100)
# Gráfico de histograma por ano com números absolutos dentro das colunas e percentuais acima
ggplot(hist_data, aes(x = NU_ANO, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Count),
vjust = 1.5, # Posicionar o número absoluto dentro da barra
color = "white", # Cor branca para visibilidade
position = position_stack(vjust = 0.5),
size = 4) +
geom_text(aes(label = paste0(round(Percentage, 2), "%")),
vjust = -0.5, # Posicionar o percentual acima da barra
color = "black", # Cor preta para o percentual
size = 4) +
labs(title = "Número de Notificações por Ano", x = "Ano", y = "Número de Notificações") +
theme_classic()
## Ajustar a NU_IDADE_N e criar IDADE_REAL
data$NU_IDADE_N[data$NU_IDADE_N < 3999] <- 0
## Ajustar a NU_IDADE_N e criar IDADE_REAL
data$NU_IDADE_N[data1$NU_IDADE_N < 3999] <- 0
# Diagnóstico: Verificar transformação de NU_IDADE_N
print(head(data1$NU_IDADE_N, 10))
## Ajustar a NU_IDADE_N e criar IDADE_REAL
data1$NU_IDADE_N[data1$NU_IDADE_N < 3999] <- 0
# Diagnóstico: Verificar transformação de NU_IDADE_N
print(head(data1$NU_IDADE_N, 10))
data <- data1 %>%
mutate(IDADE_REAL = as.numeric(substr(NU_IDADE_N, 3, 4))) %>%
mutate(Faixa_Etaria = cut(IDADE_REAL,
breaks = c(0, 1, 4, 9, 14, 19, 29, 39, 49, 59, Inf),
labels = c("0-1", "1-4", "5-9", "10-14", "15-19",
"20-29", "30-39", "40-49", "50-59", "60+"),
right = FALSE))
# Diagnóstico: Verificar resultado de IDADE_REAL e Faixa_Etaria
print(head(data[, c("IDADE_REAL", "Faixa_Etaria")], 10))
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data %>%
filter(CS_SEXO %in% c("M", "F")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
# Verificar se `Count` tem valores válidos
print(sexo_faixa_count)
# Verifique se há problemas de NA
if (all(is.na(sexo_faixa_count$Count))) {
stop("Erro: Todos os valores de Count são NA. Verifique os dados de entrada e a filtragem.")
}
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
filter(CS_SEXO %in% c("M", "F")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
data <- data1 %>%
mutate(IDADE_REAL = as.numeric(substr(NU_IDADE_N, 3, 4))) %>%
mutate(Faixa_Etaria = cut(IDADE_REAL,
breaks = c(0, 1, 4, 9, 14, 19, 29, 39, 49, 59, Inf),
labels = c("0-1", "1-4", "5-9", "10-14", "15-19",
"20-29", "30-39", "40-49", "50-59", "60+"),
right = FALSE))
# Diagnóstico: Verificar resultado de IDADE_REAL e Faixa_Etaria
print(head(data[, c("IDADE_REAL", "Faixa_Etaria")], 10))
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
filter(CS_SEXO %in% c("M", "F")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
filter(CS_SEXO %in% c("Masculino", "Feminino")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
# Diagnóstico: Verificar resultado de IDADE_REAL e Faixa_Etaria
print(head(data1[, c("IDADE_REAL", "Faixa_Etaria")], 10))
data <- data1 %>%
mutate(IDADE_REAL = as.numeric(substr(NU_IDADE_N, 3, 4))) %>%
mutate(Faixa_Etaria = cut(IDADE_REAL,
breaks = c(0, 1, 4, 9, 14, 19, 29, 39, 49, 59, Inf),
labels = c("0-1", "1-4", "5-9", "10-14", "15-19",
"20-29", "30-39", "40-49", "50-59", "60+"),
right = FALSE))
data1 <- data1 %>%
mutate(IDADE_REAL = as.numeric(substr(NU_IDADE_N, 3, 4))) %>%
mutate(Faixa_Etaria = cut(IDADE_REAL,
breaks = c(0, 1, 4, 9, 14, 19, 29, 39, 49, 59, Inf),
labels = c("0-1", "1-4", "5-9", "10-14", "15-19",
"20-29", "30-39", "40-49", "50-59", "60+"),
right = FALSE))
# Diagnóstico: Verificar resultado de IDADE_REAL e Faixa_Etaria
print(head(data1[, c("IDADE_REAL", "Faixa_Etaria")], 10))
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
filter(CS_SEXO %in% c("Masculino", "Feminino")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
# Verificar se `Count` tem valores válidos
print(sexo_faixa_count)
# Verifique se há problemas de NA
if (all(is.na(sexo_faixa_count$Count))) {
stop("Erro: Todos os valores de Count são NA. Verifique os dados de entrada e a filtragem.")
}
# Definir o valor máximo para centralizar as barras
max_count <- max(abs(sexo_faixa_count$Count), na.rm = TRUE)
# Diagnóstico: Verificar valor máximo calculado
print(max_count)
ggplot(sexo_faixa_count, aes(x = Faixa_Etaria, y = Count, fill = CS_SEXO)) +
geom_bar(stat = "identity", width = 0.7) +
geom_text(aes(label = paste0(abs(Count), " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +
labs(title = "Pirâmide Etária por Sexo e Faixa Etária",
x = "Faixa Etária", y = "Número de Notificações") +
scale_y_continuous(labels = abs, breaks = seq(-max_count, max_count, by = 5000), limits = c(-max_count, max_count)) +
scale_fill_manual(values = c("Feminino" = "red", "Masculino" = "blue")) +
coord_flip() +  # Inverter os eixos para fazer o gráfico horizontal
theme_classic() +
theme(legend.position = "top",
legend.title = element_blank(),  # Remover o título da legenda
plot.title = element_text(face = "bold", hjust = 0.5))
# Criando as faixas etárias especificadas
data1 <- data1 %>%
mutate(Faixa_Etaria1 = case_when(
IDADE_REAL < 1 ~ "Menor de 1 ano",
IDADE_REAL >= 1 & IDADE_REAL <= 5 ~ "1-5 anos",
IDADE_REAL >= 6 & IDADE_REAL <= 12 ~ "6-12 anos",
IDADE_REAL > 12 ~ "+12"
)) %>%
filter(!is.na(CS_SEXO) & CS_SEXO %in% c("M", "F"))  # Filtrar apenas M e F, removendo NA
data <- read_csv("RESULTADOS/dados_final_intoxAgro.csv")
load_dict_sinan <- function(){
#Atribui o nome do diretório onde estão os arquivos .csv referentes ao dicionário de cada campo do SINAN
dir_input <- paste(getwd(), "/dict/", sep="")
#Cria uma lista com o nome dos campos para os quais os dicionários de dados são fornecidos
list_files<-c("TP_NOT","SG_UF","UF_EMP","UF_HOSP", "SG_UF_NOT", "ID_MUNICIP", "CS_SEXO", "CS_GESTANT","CS_RACA", "CS_ESCOL_N",
"SG_UF","ID_MN_RESI","CS_ZONA", "ID_OCUPA_N", "SIT_TRAB", "LOC_EXPO",
"ZONA_EXP", "AGENTE_TOX", "UTILIZACAO", "ATIVIDA_1", "ATIVIDA_2", "ATIVIDA_3",
"VIA_1", "VIA_2", "VIA_3", "CIRCUNSTAN", "DOENCA_TRA", "TPEXP", "TPATENDE", "HOSPITAL",
"CLASSI_FIN", "CRITERIO", "EVOLUCAO", "CAT")
#Inicializa a lista final de dicionários
list_dict <- NULL
#Lê os arquivos .csv referentes aos dicionários e consolida em uma lista só (list_dict)
for (file in list_files){
#Define o diretório de cada arquivo de dicionário .csv
dir_file <- paste(paste(dir_input, file, sep = ""),".csv", sep="")
#Realiza a leitura dos dicionários .csv. Para os campos especificados realiza uma leitura como character
#considerando a presença de dois caracteres o que leva a ocorrência de 0 à esquerda (e.g. 01, 02, 03 etc)
ifelse(file %in% c("CS_ESCOL_N","ID_OCUPA_N", "SIT_TRAB", "AGENTE_TOX", "ATIVIDA_1", "ATIVIDA_2", "ATIVIDA_3", "CIRCUNSTAN"),
df_dict <- read.csv(dir_file, header =TRUE, sep=";", colClasses = c("key"="character"), fileEncoding = "latin1"),
df_dict <- read.csv(dir_file, header =TRUE, sep=";",fileEncoding = "latin1")
)
#Consolida e atualiza list_dict
list_dict <- append(list_dict, list(df_dict))
}
#Atribui ao nome dos items da lista os mesmos nomes que os campos do SINAN
names(list_dict)<-list_files
return(list_dict)
}
lista_dict <- load_dict_sinan()
reclass_sinan <- function(data, lista_dict, list_prop = NULL){
# Utiliza a lista proposta de campos (list_prop) para processar os dados
if (is.null(list_prop)){
lista <- names(lista_dict)
} else {
lista <- list_prop
}
# Para cada campo na lista, realiza a tradução dos dados
for (col in lista) {
# Escolhe o dicionário para cada campo
dict_col <- lista_dict[[col]]
# Mapeia os valores do dicionário com os valores dos dados
# Corrigido para acessar as colunas corretamente
suppressMessages(
data[[col]] <- mapvalues(data[[col]], from = dict_col[,"key"], to = dict_col[,"value"])
)
}
return(data)
}
# Aplicando a função corrigida
data1 <- reclass_sinan(data, lista_dict) |>  as.data.frame(data)
# Histograma por Ano: Quantidade de notificações por ano com percentuais e números absolutos
hist_data <- data1 %>%
group_by(NU_ANO) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # .groups = 'drop' para evitar agrupamento adicional
mutate(Percentage = (Count / sum(Count)) * 100)
# Gráfico de histograma por ano com números absolutos dentro das colunas e percentuais acima
ggplot(hist_data, aes(x = NU_ANO, y = Count)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_text(aes(label = Count),
vjust = 1.5, # Posicionar o número absoluto dentro da barra
color = "white", # Cor branca para visibilidade
position = position_stack(vjust = 0.5),
size = 4) +
geom_text(aes(label = paste0(round(Percentage, 2), "%")),
vjust = -0.5, # Posicionar o percentual acima da barra
color = "black", # Cor preta para o percentual
size = 4) +
labs(title = "Número de Notificações por Ano", x = "Ano", y = "Número de Notificações") +
theme_classic()
## Ajustar a NU_IDADE_N e criar IDADE_REAL
data1$NU_IDADE_N[data1$NU_IDADE_N < 3999] <- 0
# Diagnóstico: Verificar transformação de NU_IDADE_N
print(head(data1$NU_IDADE_N, 10))
data1 <- data1 %>%
mutate(IDADE_REAL = as.numeric(substr(NU_IDADE_N, 3, 4))) %>%
mutate(Faixa_Etaria = cut(IDADE_REAL,
breaks = c(0, 1, 4, 9, 14, 19, 29, 39, 49, 59, Inf),
labels = c("0-1", "1-4", "5-9", "10-14", "15-19",
"20-29", "30-39", "40-49", "50-59", "60+"),
right = FALSE))
# Diagnóstico: Verificar resultado de IDADE_REAL e Faixa_Etaria
print(head(data1[, c("IDADE_REAL", "Faixa_Etaria")], 10))
# Ajustar a contagem por sexo e faixa etária
sexo_faixa_count <- data1 %>%
filter(CS_SEXO %in% c("Masculino", "Feminino")) %>%  # Filtrar apenas M e F
group_by(CS_SEXO, Faixa_Etaria) %>%
dplyr::summarise(Count = n(), .groups = 'drop') %>%  # Inclui .groups = 'drop' para evitar agrupamento
ungroup() %>%
mutate(Total = sum(Count, na.rm = TRUE),  # Adiciona na.rm = TRUE para segurança
Percentage = (Count / Total) * 100,
CS_SEXO = recode(CS_SEXO, "M" = "Masculino", "F" = "Feminino"),
Count = ifelse(CS_SEXO == "Masculino", -Count, Count))  # Inverter valores para o sexo masculino
# Verificar se `Count` tem valores válidos
print(sexo_faixa_count)
# Verifique se há problemas de NA
if (all(is.na(sexo_faixa_count$Count))) {
stop("Erro: Todos os valores de Count são NA. Verifique os dados de entrada e a filtragem.")
}
# Definir o valor máximo para centralizar as barras
max_count <- max(abs(sexo_faixa_count$Count), na.rm = TRUE)
# Diagnóstico: Verificar valor máximo calculado
print(max_count)
ggplot(sexo_faixa_count, aes(x = Faixa_Etaria, y = Count, fill = CS_SEXO)) +
geom_bar(stat = "identity", width = 0.7) +
geom_text(aes(label = paste0(abs(Count), " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +
labs(title = "Pirâmide Etária por Sexo e Faixa Etária",
x = "Faixa Etária", y = "Número de Notificações") +
scale_y_continuous(labels = abs, breaks = seq(-max_count, max_count, by = 5000), limits = c(-max_count, max_count)) +
scale_fill_manual(values = c("Feminino" = "red", "Masculino" = "blue")) +
coord_flip() +  # Inverter os eixos para fazer o gráfico horizontal
theme_classic() +
theme(legend.position = "top",
legend.title = element_blank(),  # Remover o título da legenda
plot.title = element_text(face = "bold", hjust = 0.5))
# Criando as faixas etárias especificadas
grafico2 <- data1 %>%
mutate(Faixa_Etaria1 = case_when(
IDADE_REAL < 1 ~ "Menor de 1 ano",
IDADE_REAL >= 1 & IDADE_REAL <= 5 ~ "1-5 anos",
IDADE_REAL >= 6 & IDADE_REAL <= 12 ~ "6-12 anos",
IDADE_REAL > 12 ~ "+12"
)) %>%
filter(!is.na(CS_SEXO) & CS_SEXO %in% c("M", "F"))  # Filtrar apenas M e F, removendo NA
# Contagem por sexo e faixa etária
sexo_faixa_count <- grafico2 %>%
group_by(CS_SEXO, Faixa_Etaria1) %>%
dplyr::summarise(Count = n()) %>%
ungroup() %>%
mutate(Total = sum(Count),
Percentage = (Count / Total) * 100)
# Gráfico de barras empilhadas para sexo e as novas faixas etárias
ggplot(sexo_faixa_count, aes(x = CS_SEXO, y = Count, fill = Faixa_Etaria1)) +
geom_bar(stat = "identity", position = "stack") +
geom_text(aes(label = paste0(Count, " (", round(Percentage, 2), "%)")),
position = position_stack(vjust = 0.5), size = 3, fontface = "bold") +  # Aplicar negrito aos números
labs(title = "Distribuição por Sexo e Faixa Etária", x = "Sexo", y = "Número de Notificações") +
scale_fill_brewer(palette = "Pastel1", na.translate = FALSE) +  # Remover NA da legenda
guides(fill = guide_legend(title = NULL)) +  # Remover o título da legenda
theme_classic()
View(sexo_faixa_count)
View(grafico2)
